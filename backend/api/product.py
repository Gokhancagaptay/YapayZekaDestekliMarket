from fastapi import APIRouter, HTTPException, Depends, Query, Path, Body
from pydantic import BaseModel, Field, validator
from typing import List, Optional, Dict, Any
from pymongo import MongoClient
from bson import ObjectId
from fastapi.security import HTTPBearer
from core.settings import MONGO_URL
from api.user import verify_token

router = APIRouter()
security = HTTPBearer()

# üìå MongoDB Baƒülantƒ±sƒ±
client = MongoClient(MONGO_URL)
db = client["online_market"]
products_collection = db["products"]
products_collection.create_index([("name", 1)], unique=True)

# üìå √úr√ºn ID'sinin ge√ßerli bir ObjectId olup olmadƒ±ƒüƒ±nƒ± kontrol etmek i√ßin yardƒ±mcƒ± fonksiyon
def validate_object_id(id_string: str) -> ObjectId:
    try:
        return ObjectId(id_string)
    except Exception:
        raise HTTPException(status_code=400, detail="Ge√ßersiz √úr√ºn ID formatƒ±")

# üìå √úr√ºn Modeli
class ProductBase(BaseModel):
    name: str = Field(..., min_length=1)
    price: float = Field(..., gt=0)
    stock: int = Field(..., ge=0)
    image_url: str
    category: str = Field(..., min_length=1)

class ProductCreate(ProductBase):
    pass

class ProductUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1)
    price: Optional[float] = Field(None, gt=0)
    stock: Optional[int] = Field(None, ge=0)
    image_url: Optional[str] = None
    category: Optional[str] = Field(None, min_length=1)

class ProductResponse(ProductBase):
    id: str = Field(alias="_id")

    class Config:
        populate_by_name = True
        json_encoders = {
            ObjectId: str
        }

    @validator('id', pre=True, allow_reuse=True)
    def convert_objectid_to_str(cls, value):
        if isinstance(value, ObjectId):
            return str(value)
        return value

# Yardƒ±mcƒ± fonksiyon: MongoDB d√∂k√ºmanƒ±nƒ± ProductResponse modeline √ßevir
def map_product_to_response(product: Dict[str, Any]) -> Dict[str, Any]:
    product["_id"] = str(product["_id"])
    return product

# üîπ √úr√ºn ekleme (JWT doƒürulama ile)
@router.post("/", summary="Yeni √úr√ºn Ekle (Admin Yetkili)", response_model=ProductResponse)
async def create_product(product_data: ProductCreate, current_user: dict = Depends(verify_token)):
    user_info, role = current_user
    if role != "admin":
        raise HTTPException(status_code=403, detail="Yetkisiz i≈ülem: Sadece adminler √ºr√ºn ekleyebilir.")
    
    product_dict = product_data.model_dump()
    
    if products_collection.find_one({"name": product_dict["name"]}):
        raise HTTPException(status_code=400, detail=f"'{product_dict['name']}' isimli √ºr√ºn zaten mevcut.")
    
    try:
        result = products_collection.insert_one(product_dict)
        created_product = products_collection.find_one({"_id": result.inserted_id})
        if created_product:
            return ProductResponse(**created_product)
        raise HTTPException(status_code=500, detail="√úr√ºn olu≈üturuldu ancak getirilemedi.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"√úr√ºn eklenirken bir hata olu≈ütu: {str(e)}")

# üîπ T√ºm √ºr√ºnleri listeleme
@router.get("/", summary="T√ºm √úr√ºnleri Listele (Arama ve Filtre ile)", response_model=List[ProductResponse])
async def list_products(
    search: Optional[str] = Query(None, description="√úr√ºn adƒ±nda arama yap"),
    category: Optional[str] = Query(None, description="Kategoriye g√∂re filtrele")
):
    query = {}
    if search:
        query["name"] = {"$regex": search, "$options": "i"}
    if category:
        query["category"] = category
    
    try:
        products_cursor = products_collection.find(query)
        products_list = [ProductResponse(**p) for p in products_cursor]
        return products_list
    except Exception as e:
        print(f"HATA DETAYI (list_products): {e}")
        from pydantic import ValidationError
        if isinstance(e, ValidationError):
            print(f"Pydantic Validation Error details: {e.errors()}")
        raise HTTPException(status_code=500, detail=f"√úr√ºnler listelenirken bir hata olu≈ütu: {str(e)}")

@router.get("/categories", summary="T√ºm √úr√ºn Kategorilerini Listele", response_model=List[str])
async def get_categories():
    try:
        categories = products_collection.distinct("category")
        return categories
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Kategoriler alƒ±nƒ±rken bir hata olu≈ütu: {str(e)}")

# üîπ Belirli bir √ºr√ºn√º getirme
@router.get("/{product_id}", summary="Belirli Bir √úr√ºn√º Getir", response_model=ProductResponse)
async def get_product_by_id(product_id: str = Path(..., description="Getirilecek √ºr√ºn√ºn ID'si")):
    db_id = validate_object_id(product_id)
    product = products_collection.find_one({"_id": db_id})
    if product:
        return ProductResponse(**product)
    raise HTTPException(status_code=404, detail=f"'{product_id}' ID'li √ºr√ºn bulunamadƒ±.")

# üîπ √úr√ºn g√ºncelleme
@router.put("/{product_id}", summary="√úr√ºn√º G√ºncelle (Admin Yetkili)", response_model=ProductResponse)
async def update_product(
    product_id: str = Path(..., description="G√ºncellenecek √ºr√ºn√ºn ID'si"), 
    product_update: ProductUpdate = Body(...),
    current_user: dict = Depends(verify_token)
):
    user_info, role = current_user
    if role != "admin":
        raise HTTPException(status_code=403, detail="Yetkisiz i≈ülem: Sadece adminler √ºr√ºn g√ºncelleyebilir.")
    
    db_id = validate_object_id(product_id)
    update_data = product_update.model_dump(exclude_unset=True)

    if not update_data:
        raise HTTPException(status_code=400, detail="G√ºncellenecek veri bulunmuyor.")
    
    if "name" in update_data:
        existing_product_with_name = products_collection.find_one({"name": update_data["name"], "_id": {"$ne": db_id}})
        if existing_product_with_name:
            raise HTTPException(status_code=400, detail=f"'{update_data['name']}' isimli ba≈üka bir √ºr√ºn zaten mevcut.")

    result = products_collection.update_one({"_id": db_id}, {"$set": update_data})
    
    if result.matched_count == 0:
        raise HTTPException(status_code=404, detail=f"'{product_id}' ID'li √ºr√ºn bulunamadƒ±.")
    
    updated_product = products_collection.find_one({"_id": db_id})
    if updated_product:
        return ProductResponse(**updated_product)
    raise HTTPException(status_code=500, detail="√úr√ºn g√ºncellendi ancak getirilemedi.")

# üîπ √úr√ºn silme
@router.delete("/{product_id}", summary="√úr√ºn√º Sil (Admin Yetkili)")
async def delete_product(
    product_id: str = Path(..., description="Silinecek √ºr√ºn√ºn ID'si"), 
    current_user: dict = Depends(verify_token)
):
    user_info, role = current_user
    if role != "admin":
        raise HTTPException(status_code=403, detail="Yetkisiz i≈ülem: Sadece adminler √ºr√ºn silebilir.")
    
    db_id = validate_object_id(product_id)
    result = products_collection.delete_one({"_id": db_id})
    
    if result.deleted_count == 0:
        raise HTTPException(status_code=404, detail=f"'{product_id}' ID'li √ºr√ºn bulunamadƒ±.")
    
    return {"message": f"'{product_id}' ID'li √ºr√ºn ba≈üarƒ±yla silindi."}

# üîπ MongoDB Baƒülantƒ± Testi
@router.get("/test-connection", summary="MongoDB Baƒülantƒ± Testi")
async def test_connection_endpoint():
    try:
        db.command('ping')
        count = products_collection.count_documents({})
        return {
            "status": "success",
            "message": "MongoDB baƒülantƒ±sƒ± ba≈üarƒ±lƒ±",
            "product_count": count
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"MongoDB baƒülantƒ± hatasƒ±: {str(e)}")
